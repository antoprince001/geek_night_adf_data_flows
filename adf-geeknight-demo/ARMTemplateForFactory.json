{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-geeknight-demo"
		},
		"ls_adls_storage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_adls_storage'"
		},
		"ls_az_sqldb_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_az_sqldb'"
		},
		"ls_adls_storage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dlsgeeknight.dfs.core.windows.net/"
		},
		"ls_az_sqldb_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "geeknight.database.windows.net"
		},
		"ls_az_sqldb_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sqldb-geeknight"
		},
		"ls_az_sqldb_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "admin_sa"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceRestaurantReviews": {
										"container_name": "data",
										"folder_name": "raw_files",
										"file_name": "restaurant_reviews.csv"
									},
									"sink1": {
										"schema_name": "dbo",
										"table_name": "RestaurantReviewsProcessedDemo"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_employee_information')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ac_df_employee_information",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_employee_information",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEmployeeInformation": {
										"container_name": "data",
										"folder_name": "raw_files",
										"file_name": "EmployeeInformation.csv"
									},
									"sinkUpdatedEmployeeInformation": {
										"schema_name": "dbo",
										"table_name": "EmployeeInformation"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo3"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_employee_information')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_process_restaurant_reviews')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ac_df_restaurant_reviews",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_restaurant_reviews",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceRestaurantReviews": {
										"container_name": "data",
										"folder_name": "raw_files",
										"file_name": "restaurant_reviews.csv"
									},
									"sinkProcessedRestaurantReviews": {
										"schema_name": "dbo",
										"table_name": "RestaurantReviewsProcessed"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_restaurant_reviews')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_process_trip_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ac_df_trip_data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_trip_data",
								"type": "DataFlowReference",
								"parameters": {
									"dest_container_name": "'data'",
									"dest_folder_name": "'processed'"
								},
								"datasetParameters": {
									"sourceTripData": {
										"container_name": "data",
										"folder_name": "raw_files",
										"file_name": "trip_data.csv"
									},
									"sourceDriverInformation": {
										"container_name": "data",
										"folder_name": "raw_files",
										"file_name": "driver_information.csv"
									},
									"sourceVehicleInformation": {
										"container_name": "data",
										"folder_name": "raw_files",
										"file_name": "vehicle_information.csv"
									},
									"sinkJsonFile": {},
									"sinkParquetFile": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo2"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_trip_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sink_sqldb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_az_sqldb",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"table_name": {
						"type": "string",
						"defaultValue": "RestaurantReviewsProcessedDemo"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_az_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container_name": {
						"type": "string",
						"defaultValue": "data"
					},
					"folder_name": {
						"type": "string",
						"defaultValue": "raw_files"
					},
					"file_name": {
						"type": "string",
						"defaultValue": "restaurant_reviews.csv"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder_name",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_adls_storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adls_storage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_adls_storage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_az_sqldb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ls_az_sqldb_properties_typeProperties_server')]",
					"database": "[parameters('ls_az_sqldb_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_az_sqldb_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_az_sqldb_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_source_csv",
								"type": "DatasetReference"
							},
							"name": "sourceRestaurantReviews"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_sqldb",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "selectRelevantColumns"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Restaurant as string,",
						"          Reviewer as string,",
						"          Review as string,",
						"          Rating as integer,",
						"          Metadata as string,",
						"          Time as string,",
						"          Pictures as integer,",
						"          dummy_column as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     multiLineRow: true) ~> sourceRestaurantReviews",
						"sourceRestaurantReviews select(mapColumn(",
						"          Restaurant,",
						"          ReviewerName = Reviewer,",
						"          Review,",
						"          Rating,",
						"          Metadata,",
						"          Time,",
						"          Pictures",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRelevantColumns",
						"selectRelevantColumns derive(ReviewLength = length(Review),",
						"          HasPictures = case(equals(Pictures,0),'No','Yes')) ~> derivedColumn1",
						"derivedColumn1 filter(Rating != 3) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Restaurant,",
						"          ReviewerName,",
						"          Review,",
						"          Rating,",
						"          Metadata,",
						"          Time,",
						"          Pictures,",
						"          ReviewLength,",
						"          HasPictures",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_sink_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_employee_information')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo3"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_source_csv",
								"type": "DatasetReference"
							},
							"name": "sourceEmployeeInformation"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_sqldb",
								"type": "DatasetReference"
							},
							"name": "sinkUpdatedEmployeeInformation"
						}
					],
					"transformations": [
						{
							"name": "alterRowWithEndDate"
						},
						{
							"name": "derivedColumnForStatus"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as integer,",
						"          Region as string,",
						"          FunctionEmp as string,",
						"          LevelEmp as string,",
						"          RoleEmp as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          Status as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployeeInformation",
						"derivedColumnForStatus alterRow(updateIf(!isNull(EndDate))) ~> alterRowWithEndDate",
						"sourceEmployeeInformation derive(Status = isNull(EndDate)) ~> derivedColumnForStatus",
						"alterRowWithEndDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['EmpID'],",
						"     format: 'table',",
						"     postSQLs:['INSERT INTO dbo.Audit (TableName) VALUES (\\'dbo.EmployeeInformation\\');'],",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EmpID,",
						"          Status",
						"     )) ~> sinkUpdatedEmployeeInformation"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_sink_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_restaurant_reviews')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_source_csv",
								"type": "DatasetReference"
							},
							"name": "sourceRestaurantReviews"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_sqldb",
								"type": "DatasetReference"
							},
							"name": "sinkProcessedRestaurantReviews"
						}
					],
					"transformations": [
						{
							"name": "selectRequiredColumns"
						},
						{
							"name": "derivedColumn"
						},
						{
							"name": "filterRatingsWithThree"
						},
						{
							"name": "sortByRestaurantName"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Restaurant as string,",
						"          Reviewer as string,",
						"          Review as string,",
						"          Rating as integer,",
						"          Metadata as string,",
						"          Time as string,",
						"          Pictures as integer,",
						"          dummy_column as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     multiLineRow: true) ~> sourceRestaurantReviews",
						"sourceRestaurantReviews select(mapColumn(",
						"          Restaurant,",
						"          ReviewerName = Reviewer,",
						"          Review,",
						"          Rating,",
						"          Metadata,",
						"          Time,",
						"          Pictures",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRequiredColumns",
						"selectRequiredColumns derive(ReviewLength = length(Review),",
						"          HasPictures = case(equals(Pictures,0),'No','Yes'),",
						"          Time = toTimestamp(concat(Time, ':0'), 'M/d/yyyy H:mm:s')) ~> derivedColumn",
						"derivedColumn filter(Rating != 3) ~> filterRatingsWithThree",
						"filterRatingsWithThree sort(asc(Restaurant, true),",
						"     caseInsensitive: true) ~> sortByRestaurantName",
						"sortByRestaurantName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Restaurant,",
						"          ReviewerName,",
						"          Review,",
						"          Rating,",
						"          Metadata,",
						"          Time,",
						"          Pictures,",
						"          ReviewLength,",
						"          HasPictures",
						"     )) ~> sinkProcessedRestaurantReviews"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_sink_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_trip_data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo2"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_source_csv",
								"type": "DatasetReference"
							},
							"name": "sourceTripData"
						},
						{
							"dataset": {
								"referenceName": "ds_source_csv",
								"type": "DatasetReference"
							},
							"name": "sourceDriverInformation"
						},
						{
							"dataset": {
								"referenceName": "ds_source_csv",
								"type": "DatasetReference"
							},
							"name": "sourceVehicleInformation"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adls_storage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkJsonFile"
						},
						{
							"linkedService": {
								"referenceName": "ls_adls_storage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkParquetFile"
						}
					],
					"transformations": [
						{
							"name": "joinTripWithVehicleData"
						},
						{
							"name": "selectRequiredColumns"
						},
						{
							"name": "split1"
						},
						{
							"name": "aggregateAvgRatingByVehicleType"
						},
						{
							"name": "joinDriverInformation"
						}
					],
					"scriptLines": [
						"parameters{",
						"     dest_container_name as string ('data'),",
						"     dest_folder_name as string ('processed')",
						"}",
						"source(output(",
						"          TripID as short,",
						"          DriverID as string,",
						"          VehicleID as string,",
						"          PickUpLocation as string,",
						"          DropOffLocation as string,",
						"          StartTime as timestamp,",
						"          EndTime as timestamp,",
						"          Distance as short,",
						"          Fare as short,",
						"          Rating as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     multiLineRow: true) ~> sourceTripData",
						"source(output(",
						"          DriverID as string,",
						"          Name as string,",
						"          Age as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceDriverInformation",
						"source(output(",
						"          VehicleID as string,",
						"          VehicleType as string,",
						"          VehicleRegistration as string,",
						"          CityID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceVehicleInformation",
						"sourceTripData, sourceVehicleInformation join(sourceTripData@VehicleID == sourceVehicleInformation@VehicleID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinTripWithVehicleData",
						"joinTripWithVehicleData select(mapColumn(",
						"          TripID,",
						"          DriverID,",
						"          VehicleID = sourceTripData@VehicleID,",
						"          PickUpLocation,",
						"          DropOffLocation,",
						"          StartTime,",
						"          EndTime,",
						"          Distance,",
						"          Fare,",
						"          Rating,",
						"          VehicleType,",
						"          VehicleRegistration,",
						"          CityID",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: true) ~> selectRequiredColumns",
						"selectRequiredColumns split(Distance < 12,",
						"     disjoint: false) ~> split1@(TripLessThanTenKms, TripMoreThanTenKms)",
						"split1@TripLessThanTenKms aggregate(groupBy(VehicleType),",
						"     AvgRating = avg(Rating)) ~> aggregateAvgRatingByVehicleType",
						"split1@TripMoreThanTenKms, sourceDriverInformation join(split1@TripMoreThanTenKms@DriverID == sourceDriverInformation@DriverID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDriverInformation",
						"aggregateAvgRatingByVehicleType sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: ($dest_container_name),",
						"     folderPath: (concat(toString(currentDate('IST')),'/',$dest_folder_name,'/JSON')),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          VehicleType,",
						"          AvgRating",
						"     )) ~> sinkJsonFile",
						"joinDriverInformation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: ($dest_container_name),",
						"     folderPath: (concat(toString(currentDate('IST')),'/',$dest_folder_name,'/PARQUET')),",
						"     compressionCodec: 'snappy',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          TripID,",
						"          DriverID = split1@TripMoreThanTenKms@DriverID,",
						"          VehicleID,",
						"          PickUpLocation,",
						"          DropOffLocation,",
						"          StartTime,",
						"          EndTime,",
						"          Distance,",
						"          Fare,",
						"          Rating,",
						"          VehicleType,",
						"          VehicleRegistration,",
						"          CityID,",
						"          Name,",
						"          Age",
						"     )) ~> sinkParquetFile"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_csv')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_storage')]"
			]
		}
	]
}